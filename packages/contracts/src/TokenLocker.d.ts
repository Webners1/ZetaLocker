/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TokenLockerInterface extends ethers.utils.Interface {
  functions: {
    "claimFees(address[])": FunctionFragment;
    "hodlDeposit(address,uint256,uint256,uint256)": FunctionFragment;
    "hodlers(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "panicWithdraw(address)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claimFees", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "hodlDeposit",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hodlers", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "panicWithdraw",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;

  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hodlDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hodlers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "panicWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "FeesClaimed()": EventFragment;
    "Hodl(address,address,uint256,uint256,uint256)": EventFragment;
    "PanicWithdraw(address,address,uint256,uint256)": EventFragment;
    "Withdrawal(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeesClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Hodl"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PanicWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export class TokenLocker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TokenLockerInterface;

  functions: {
    claimFees(
      tokenList: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimFees(address[])"(
      tokenList: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hodlDeposit(
      token: string,
      amount: BigNumberish,
      unlockTime: BigNumberish,
      penaltyFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "hodlDeposit(address,uint256,uint256,uint256)"(
      token: string,
      amount: BigNumberish,
      unlockTime: BigNumberish,
      penaltyFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hodlers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string] & { hodlerAddress: string }>;

    "hodlers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string] & { hodlerAddress: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    panicWithdraw(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "panicWithdraw(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  claimFees(
    tokenList: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimFees(address[])"(
    tokenList: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hodlDeposit(
    token: string,
    amount: BigNumberish,
    unlockTime: BigNumberish,
    penaltyFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "hodlDeposit(address,uint256,uint256,uint256)"(
    token: string,
    amount: BigNumberish,
    unlockTime: BigNumberish,
    penaltyFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hodlers(arg0: string, overrides?: CallOverrides): Promise<string>;

  "hodlers(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  panicWithdraw(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "panicWithdraw(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(token: string, overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    claimFees(tokenList: string[], overrides?: CallOverrides): Promise<void>;

    "claimFees(address[])"(
      tokenList: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    hodlDeposit(
      token: string,
      amount: BigNumberish,
      unlockTime: BigNumberish,
      penaltyFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "hodlDeposit(address,uint256,uint256,uint256)"(
      token: string,
      amount: BigNumberish,
      unlockTime: BigNumberish,
      penaltyFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    hodlers(arg0: string, overrides?: CallOverrides): Promise<string>;

    "hodlers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    panicWithdraw(token: string, overrides?: CallOverrides): Promise<void>;

    "panicWithdraw(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(token: string, overrides?: CallOverrides): Promise<void>;

    "withdraw(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    FeesClaimed(): EventFilter;

    Hodl(
      hodler: string | null,
      token: null,
      amount: null,
      unlockTime: null,
      penaltyFee: null
    ): EventFilter;

    PanicWithdraw(
      hodler: string | null,
      token: null,
      amount: null,
      timediff: null
    ): EventFilter;

    Withdrawal(hodler: string | null, token: null, amount: null): EventFilter;
  };

  estimateGas: {
    claimFees(tokenList: string[], overrides?: Overrides): Promise<BigNumber>;

    "claimFees(address[])"(
      tokenList: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    hodlDeposit(
      token: string,
      amount: BigNumberish,
      unlockTime: BigNumberish,
      penaltyFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "hodlDeposit(address,uint256,uint256,uint256)"(
      token: string,
      amount: BigNumberish,
      unlockTime: BigNumberish,
      penaltyFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hodlers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "hodlers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    panicWithdraw(token: string, overrides?: Overrides): Promise<BigNumber>;

    "panicWithdraw(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(token: string, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimFees(
      tokenList: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimFees(address[])"(
      tokenList: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hodlDeposit(
      token: string,
      amount: BigNumberish,
      unlockTime: BigNumberish,
      penaltyFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "hodlDeposit(address,uint256,uint256,uint256)"(
      token: string,
      amount: BigNumberish,
      unlockTime: BigNumberish,
      penaltyFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hodlers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hodlers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    panicWithdraw(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "panicWithdraw(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
